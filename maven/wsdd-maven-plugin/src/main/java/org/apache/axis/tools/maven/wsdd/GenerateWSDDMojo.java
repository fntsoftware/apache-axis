/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.axis.tools.maven.wsdd;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Enumeration;
import java.util.List;

import org.apache.axis.model.wsdd.Deployment;
import org.apache.axis.model.wsdd.WSDDUtil;
import org.apache.maven.artifact.DependencyResolutionRequiredException;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;
import org.xml.sax.InputSource;

import com.github.veithen.ulog.PlexusLoggerInjector;

/**
 * 
 * 
 * @goal generate-wsdd
 * @requiresDependencyResolution compile
 */
public class GenerateWSDDMojo extends AbstractMojo {
    /**
     * @component
     */
    // This is necessary to set up logging such that all messages logged by the Axis
    // libraries through commons logging are redirected to Plexus logs.
    PlexusLoggerInjector loggerInjector;

    /**
     * The maven project.
     *
     * @parameter expression="${project}"
     * @required
     * @readonly
     */
    private MavenProject project;

    /**
     * 
     * 
     * @parameter
     * @required
     */
    private String type;
    
    /**
     * A set of WSDD files (typically generated by wsdl2java-maven-plugin) to be merged into the
     * output WSDD. If this parameter is not set, then the plug-in will just generate a default
     * configuration file.
     * 
     * @parameter
     */
    private File[] files;
    
    /**
     * 
     * @parameter
     * @required
     */
    private File output;
    
    public void execute() throws MojoExecutionException, MojoFailureException {
        // TODO: copy & paste from AbstractGenerateWsdlMojo
        List classpath;
        try {
            classpath = project.getCompileClasspathElements();
        } catch (DependencyResolutionRequiredException ex) {
            throw new MojoExecutionException("Unexpected exception", ex);
        }
        URL[] urls = new URL[classpath.size()];
        for (int i=0; i<classpath.size(); i++) {
            try {
                urls[i] = new File((String)classpath.get(i)).toURL();
            } catch (MalformedURLException ex) {
                throw new MojoExecutionException("Unexpected exception", ex);
            }
        }
        ClassLoader cl = new URLClassLoader(urls);
        
        Deployment deployment;
        
        getLog().info("Loading default configuration");
        try {
            deployment = WSDDUtil.buildDefaultConfiguration(cl, type);
        } catch (IOException ex) {
            throw new MojoFailureException("Unable to build default configuration", ex);
        }
        
        if (files != null) {
            // Load WSDD files from plug-in configuration
            for (int i=0; i<files.length; i++) {
                File file = files[i];
                getLog().info("Loading " + file);
                try {
                    deployment.merge(WSDDUtil.load(new InputSource(file.toURL().toString())));
                } catch (Exception ex) {
                    throw new MojoFailureException("Failed to process " + file, ex);
                }
            }
        }
        
        getLog().info("Writing " + output);
        output.getParentFile().mkdirs();
        try {
            FileOutputStream out = new FileOutputStream(output);
            try {
                WSDDUtil.save(deployment, out);
            } finally {
                out.close();
            }
        } catch (Exception ex) {
            throw new MojoFailureException("Failed to write " + output, ex);
        }
    }
}
