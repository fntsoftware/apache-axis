~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements. See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership. The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License. You may obtain a copy of the License at
~~
~~ http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied. See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

           ------------
           Changing the Java class associated with an XML type
           ------------


Changing the Java class associated with an XML type

  wsdl2java-maven-plugin uses the default mappings between XML types and Java classes determined by the
  configured <<<typeMappingVersion>>>. However, there may be situations where you might want
  to represent a given XML type using a Java type other than the one determined by the default mapping.
  E.g. you might want <<<xs:base64Binary>>> to be represented by <<<java.activation.DataHandler>>>
  instead of the default <<<byte[]>>>. This can be achieved using the <<<javaXmlTypeMappings>>> parameter
  as shown in the following sample:

%{snippet|id=javaXmlTypeMappings|file=${project.basedir}/../../samples/mtomstub-sample/pom.xml}

  Note the unusual way to represent the QName of the XML type (which the plugin uses to work around a
  restriction in Maven).
  
  This feature is similar to the <<<java-xml-type-mapping>>> element in the JAX-RPC mapping file defined by the
  Enterprise Web Services 1.1 specification.
  
  In addition to specifying a <<<javaXmlTypeMapping>>>, you also need to make sure that a corresponding
  type mapping is registered at runtime. This is typically done by adding an appropriate <<<typeMapping>>>
  element in the relevant WSDD file.

* Example: consuming an MTOM enabled Web service

  By default stubs generated using wsdl2java don't support MTOM, although Axis has the necessary
  serializers/deserializers that recognize <<<xop:Include>>> elements and that use <<<java.activation.DataHandler>>>
  to represent the binary data in Java. To enable them, map the <<<xs:base64Binary>>> type to
  <<<java.activation.DataHandler>>> as shown above and set up a <<<client-config.wsdd>>> file with the
  following type mapping:
  
%{snippet|id=typeMapping|file=${project.basedir}/../../samples/mtomstub-sample/src/main/resources/client-config.wsdd}
